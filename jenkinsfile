pipeline{
    agent any
    stages{
        stage("checkout"){
            steps{
                git branch: 'main ', credentialsId: 'github-token', url: 'https://github.com/bergamut/test.git'
                catchError(message:'skipping because unstable',buildResult:'UNSTABLE',stageResult:'UNSTABLE'){
                    retry(3){
                        sh 'ls -lai'
                    }
                }
            }
        }
        stage("build"){
            steps{
                echo 'lastSuccessfulCommit = ' + lastSuccessfulCommit
                // sh "cat jenkinsfile"
                // sh "git show --pretty=format: --name-only | grep README"
            }
        }
    }
}

def lastSuccessfulCommit = getLastSuccessfulCommit()

def getLastSuccessfulCommit() {
  def lastSuccessfulHash = null
  def lastSuccessfulBuild = currentBuild.rawBuild.getPreviousSuccessfulBuild()
  if ( lastSuccessfulBuild ) {
    lastSuccessfulHash = commitHashForBuild( lastSuccessfulBuild )
  }
  return lastSuccessfulHash
}
def getLastSuccessfulCommit() {
  def lastSuccessfulHash = null
  def lastSuccessfulBuild = currentBuild.rawBuild.getPreviousSuccessfulBuild()
  if ( lastSuccessfulBuild ) {
    lastSuccessfulHash = commitHashForBuild( lastSuccessfulBuild )
  }
  return lastSuccessfulHash
}

/**
 * Gets the commit hash from a Jenkins build object, if any
 */
@NonCPS
def commitHashForBuild( build ) {
  def scmAction = build?.actions.find { action -> action instanceof jenkins.scm.api.SCMRevisionAction }
  return scmAction?.revision?.hash
}
